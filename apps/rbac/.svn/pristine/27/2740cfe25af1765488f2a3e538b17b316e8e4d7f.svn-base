<?php
/**
 * 菜单应用服务
 * User: wcd
 * Date: 2019/4/1
 * Time: 9:38
 */
namespace app\v1\service;
use app\common\model\Menus;
use plugin\Tree;
class Menu
{
    private $_menusModel = null;
    private $_pageSize = 100;
    public function __construct()
    {
        $this->_menusModel = new Menus();
    }

    /**
     * 菜单列表分页展示
     * @param $params
     * @return array
     */
    public function index($params)
    {
        $where = [];
        if(isset($params['searchKey'])){
            $keyWords = trim($params['searchKey']);
        }
        if(isset($params['module_id']) && !empty($params['module_id'])){
            $where['module_id'] = $params['module_id'];
        }
        if(isset($params['status']) && $params['status'] !== ''){
            $where['status'] = $params['status'];
        }
        if(!empty($keyWords)){
            $where['title|url'] = ['like', '%'.$keyWords.'%'];
        }
        unset($params['s']); unset($params['module_id']);
        $total     = $this->_menusModel->where($where)->field('id')->count();
        $menusInfo = $this->_menusModel->where($where)->paginate($this->_pageSize, $total, ['query' => $params]);
        $pages     = $menusInfo->render();
        $menusInfo = $this->getMenuTree($menusInfo->toArray()['data']);
        return ['menus' => $menusInfo, 'pages' => $pages];
    }

    /**
     * 获取菜单层次关系 父-子(3级菜单）
     * @author wcd
     * @param $menusInfo
     * @return array
     */
    public function getMenuTree($menusInfo)
    {
        $treeObj = new Tree();
        $treeObj->init($menusInfo);
        $data = [];
        $inchuli = [];
        foreach($treeObj->arr as $value){
            $tree = $treeObj->getTreeArray($value['id'],' ');
            if(!in_array($value['id'], $inchuli)){
                $data[] = $value;
                $inchuli[] = $value['id'];
            }
            if(!empty($tree)){
                foreach($tree as $vl){
                    if(empty($vl['childlist'])){
                        unset($vl['childlist']);
                        if(!in_array($vl['id'], $inchuli)){
                            $data[] = $vl;
                            $inchuli[] = $vl['id'];
                        }

                    }else{
                        if(!in_array($vl['id'], $inchuli)){
                            $childlist = $vl['childlist'];
                            unset($vl['childlist']);
                            $data[] = $vl;
                            $inchuli[] = $vl['id'];
                        }
                        foreach($childlist as $va){
                            unset($va['childlist']);
                            if(!in_array($va['id'], $inchuli)){
                                $data[] = $va;
                                $inchuli[] = $va['id'];
                            }
                        }
                    }
                }
            }
        }
        unset($menusInfo);
        return $data;
    }

    /**
     * 查询每个系统的菜单总数
     * @author wcd
     * @param $system
     * @return array
     */
    public function getAllsystemMenus($system)
    {
        $menusNum = [];
        foreach($system as $moduleid => $modname){
            $menusNum[$modname] = $this->_menusModel->where(['module_id' => $moduleid])->count();
        }
       return $menusNum;
    }
    /**
     * 保存一条菜单数据
     * @author wcd
     * @time 2019-4-1 18:28:47
     * @param $params
     * @return mixed
     */
    public function saveMenu($params)
    {
        $icon = isset($params['icon']) ? $this->setIcon(trim($params['icon'])) : '';
        $save = [
            'module_id' => isset($params['module']) ? $params['module'] : 0,
            'type'       => isset($params['type']) ? $params['type'] : 0,
            'pid'        => isset($params['parentMenu']) ? $params['parentMenu'] : 0,
            'title'      => isset($params['title']) ? $params['title'] : '',
            'url'        => isset($params['url']) ? trim(trim($params['url']), '/') : '',
            'icon'       => $icon,
            'remark'     => isset($params['remark']) ? trim($params['remark']) : '',
            'weigh'      => isset($params['weight']) ? (int)trim($params['weight']) : 0,
            'status'     => isset($params['status']) ? $params['status'] : 0,
        ];
        if(isset($params['menu_id']) && $params['menu_id']){
            $menuid = (int) trim($params['menu_id']);
            if($save['pid'] > 0){
                $haschild = $this->_menusModel->getAllColums(['pid'=> $menuid], 'id');
                if($haschild) {
                    if(in_array($save['pid'], $haschild)){
                        return ['status' => 0, 'msg'=> '所选父类已是该菜单子类，不能选。'];
                    }
                    $hasGrandchild = $this->_menusModel->getAllColums(['pid'=> ['in', $haschild]], 'id');
                    if(in_array($save['pid'], $hasGrandchild)){
                        return ['status' => 0, 'msg'=> '所选父类已是该菜单孙子类，不能选。'];
                    }
                }
            }
            $save['updatetime'] = time();
            $where = [
                'id'  => $menuid
            ];
            $resid = $this->_menusModel->update($save, $where);
        }else{
            $save['createtime'] = time();
            $resid = $this->_menusModel->save($save);
        }
        if(!$resid){
            return ['status'=>0,'msg'=> '保存失败。'];
        }
        return ['status' => 1, 'msg' => '保存成功。'];
    }

    /**
     * 图标处理 fa fa******。
     * @param $getIcon
     * @return string
     */
    private function setIcon($getIcon)
    {
        $subNum = substr_count($getIcon, 'fa ');
        if($subNum == 0){
            $getIcon = 'fa ' . $getIcon;
        }elseif($subNum > 2){
            $getIcon = trim(substr($getIcon, 2, strlen($getIcon)-2));
        }
        return $getIcon;
    }

    /**
     * 编辑菜单
     * @author wcd
     * @param $where
     * @param $params
     * @return $this
     */
    public function editMenus($where, $params)
    {
        return $this->_menusModel->where($where)->update($params);
    }

    /**
     * 前端页面获取一条菜单
     * @author wcd
     * @param array $where
     * @param string $field
     * @return array
     */
    public function getOneMenu($where = [], $field = '*')
    {
        if(empty($where)){
            return [
                'module_id' => '',
                'type'       => '',
                'pid'        => '',
                'title'      => '',
                'url'        => '',
                'icon'       => '',
                'remark'     => '',
                'weigh'      => '',
                'status'     => '',
                'updatetime' => ''
            ];
        };
        return $this->_menusModel->where($where)->field($field)->find()->toArray();
    }

    /**
     * 根据菜单id删除菜单
     * @author wcd
     * @param $id
     * @return array
     */
    public function delMenuByid($id)
    {
        if(empty($id))
            return ['status' => 0, 'msg' => '请选择菜单。'];
        $map = [
            'pid'    => $id,
            'status' => 1
        ];
        $hasChild = $this->_menusModel->selectMore($map);
        if(!empty($hasChild)) return ['status' => 0, 'msg' => '该菜单下还存在正在使用的菜单。'];
        $resid = $this->_menusModel->delByWhere(['id' => $id]);
        if($resid)
            return ['status' => 1, 'msg' => '删除成功。'];
        return ['status' => 0, 'msg' => '删除失败。'];
    }
}