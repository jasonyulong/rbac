<?php
// +----------------------------------------------------------------------
// | 用户相关操作服务
// +----------------------------------------------------------------------
// | Copyright (c) 2019 http://www.jeoshi.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: kevin
// +----------------------------------------------------------------------

namespace app\v1\service;

use app\common\model\Users;
use app\common\model\UsersDetail;
use \app\common\model\UsersJob;
use \app\common\model\UsersLabel;
use \app\common\model\Organization;
use \app\common\model\UsersLog;
use think\Config;

class User extends Base
{
    /**
     * @var 每页显示的数量
     */
    public $pageSize = 100;

    /**
     * 当前页
     * @var int
     */
    public $current_page = 1;

    /**
     * 需要检测的字段
     * @var string
     */
    public $field = 'a.id,a.company_id,a.remarks,a.job_id,a.rules_id,a.allow,a.maturitytime,a.maturityuser,a.logintime,a.loginip,a.status,a.username,a.email,a.mobile,a.org_id,a.job_type,b.pact_type,b.ready_computer,b.room,b.preentrytime,b.proceduretime,b.createuser,a.createtime';

    /**
     * @name    获取用户的数据
     * @author  jason
     * @date  2019-04-01 10:39:27
     * @param $params
     * @return array
     */
    public function getInfo($params)
    {
        $user = new Users();

        //每页显示的数量
        $page_size = !empty($params['ps']) ? $params['ps'] : $this->pageSize;
        //当前页
        $current_page = (!empty($params['page']) && intval($params['page']) > 0) ? $params['page'] : $this->current_page;
        //分页起始值
        $select_start = $page_size * ($current_page - 1);
        //部门
        if (!empty($params['org_id'])) $where['a.org_id'] = trim($params['org_id']);
        $pageInfo['org_id'] = $params['org_id'];
        //状态
        if (isset($params['status']) && $params['status'] != 100) {
            $where['a.status'] = $params['status'];
            $pageInfo['status'] = $params['status'];
        }
        //开始时间
        if (!empty($params['start_time'])) {
            $start_time = strtotime($params['start_time']);
            $start_time = date('Y-m-d 00:00:00', $start_time);
            $start_time = strtotime($start_time);
        }
        //结束时间
        if (!empty($params['end_time'])) {
            $end_time = strtotime($params['end_time']);
            $end_time = date('Y-m-d 23:59:59', $end_time);
            $end_time = strtotime($end_time);
        }
        //如果开始时间跟结束时间不为空
        if (!empty($start_time) && !empty($end_time)) {
            switch ($params['timetype']) {
                case 1:
                    $where['a.createtime'] = ['BETWEEN', [$start_time, $end_time]];
                    $order = 'a.createtime desc';
                    break;
                case 2:
                    $where['a.entrytime'] = ['BETWEEN', [$start_time, $end_time]];
                    $order = 'a.entrytime desc';
                    break;
                case 3:
                    $where['b.proceduretime'] = ['BETWEEN', [$start_time, $end_time]];
                    $order = 'b.proceduretime desc';
                    break;
            }
        }

        //如果搜索的时候没有选择时间的话默认是创建时间降序
        if (empty($start_time) || empty($end_time)) $order = 'a.createtime desc';
        //协议
        if (isset($params['pact_type'])) $where['b.pact_type'] = trim($params['pact_type']);
        $pageInfo['pact_type'] = $params['pact_type'];
        //是否安排住宿
        if (isset($params['room'])) $where['b.room'] = trim($params['room']);
        $pageInfo['room'] = $params['room'];
        //是否自带电脑
        if (isset($params['ready_computer'])) $where['b.ready_computer'] = trim($params['ready_computer']);
        $pageInfo['ready_computer'] = $params['ready_computer'];
        //按字段类型搜索
        if (!empty($params['searchKey']) && !empty($params['searchValue'])) {
            $searchValue = preg_split('/[\s,，]+/', trim($params['searchValue']));
            switch ($params['searchKey']) {
                case 1:
                    $searchValue = array_filter($searchValue, function ($par) {
                        return !empty($par);
                    });
                    if (count($searchValue) == 1) {
                        $searchValue = implode(',', $searchValue);
                        $where['username'] = ['like', '%' . $searchValue . '%'];
                    } else {
                        $where['username'] = ['IN', $searchValue];
                    }
                    $pageInfo['username'] = $params['searchValue'];
                    break;
                case 2:
                    $searchValue = array_filter($searchValue, function ($par) {
                        return !empty($par);
                    });
                    if (count($searchValue) == 1) {
                        $searchValue = implode(',', $searchValue);
                        $where['mobile'] = ['like', '%' . $searchValue . '%'];
                    } else {
                        $where['mobile'] = ['IN', $searchValue];
                    }
                    $pageInfo['mobile'] = $params['searchValue'];
                    break;
                case 3:
                    $searchValue = array_filter($searchValue, function ($par) {
                        return !empty($par);
                    });
                    if (count($searchValue) == 1) {
                        $searchValue = implode(',', $searchValue);
                        $where['email'] = ['like', '%' . $searchValue . '%'];
                    } else {
                        $where['email'] = ['IN', $searchValue];
                    }
                    $pageInfo['email'] = $params['searchValue'];
                    break;
            }
        }

        $where = $where ?? [];
        //查询当前的状态的个数
        $statusTotals = $this->getStatusTotals($where);

        $userInfo = $user->limit($select_start, $page_size)
            ->alias('a')
            ->field($this->field)
            ->join('users_detail b', 'a.id = b.user_id', 'INNER')
            ->order($order)
            ->where($where)
            ->paginate($page_size, false, $pageInfo);
        if (isset($params['debug']) && $params['debug'] == 'sql') {
            echo $user->getLastSql();
            die;
        }
        $page = $userInfo->render();
        //将时间整理一下
        $users = $userInfo->toArray()['data'];
        if (!empty($users)) {
            //所有的权限标签
            $userLabel = $this->getUsersLabel();
            //所有的岗位
            $userObjInfo = $this->getUserObj();
            foreach ($users as $key => $val) {
                //授权时间转换一下
                $users[$key]['preentrytime'] = !empty($val['preentrytime']) ? date('Y-m-d H:i:s', $val['preentrytime']) : '';
                $users[$key]['proceduretime'] = !empty($val['proceduretime']) ? date('Y-m-d H:i:s', $val['proceduretime']) : '';
                $users[$key]['createtime'] = !empty($val['createtime']) ? date('Y-m-d H:i:s', $val['createtime']) : '';
                $users[$key]['maturitytime'] = !empty($val['maturitytime']) ? date('Y-m-d H:i:s', $val['maturitytime']) : '';
                $users[$key]['logintime'] = !empty($val['logintime']) ? date('Y-m-d H:i:s', $val['logintime']) : '';
                if (!empty($users[$key]['createtime'])) {
                    $retention_time = retentionTimes($val['createtime']);
                    $users[$key]['retention_time'] = $retention_time;
                } else {
                    $users[$key]['retention_time'] = 0;
                }
                //权限标签处理一下
                $rule_id = $this->packageRule($val['rules_id'],$userLabel);
                $rule_id = $rule_id ?? '';
                $users[$key]['rules_id'] = $rule_id;
                //岗位标签处理一下
                $job_id = $this->userJob($val['job_id'],$userObjInfo);
                $job_id = $job_id ?? '';
                $users[$key]['job_id'] = $job_id;
            }
        }
        $return_data = [
            'user' => $users,
            'page' => $page,
            'statusTotals' => $statusTotals
        ];
        return $return_data;
    }

    /**
     * @name    权限标签ID拆分 ，再组装
     * @author  jason
     * @date  2019-04-04 06:15:12
     * @param $ruleStr
     * @return string
     */
    public function packageRule($ruleStr,$userLabel) :string
    {
        //如果为空就直接返回空字符串
        if (empty($ruleStr)) {
            return '';
        }
        //拆分，组装
        $ruleArr = explode(',', trim($ruleStr, ','));
        $arr = [];
        foreach ($ruleArr as $k => $v) {
            $arr[$v] = $userLabel[$v];
        }
        $str = implode('，', $arr);
        return $str;
    }

    /**
     * @name    岗位ID拆分 ，再组装
     * @author  jason
     * @date  2019-04-05 12:44:54
     * @param $userObj
     * @return string
     */
    public function userJob($userObj,$userObjInfo)
    {
        //如果为空就直接返回空数组
        if (empty($userObj)) {
            return '';
        }
        //拆分，组装
        $objArr = explode(',', trim($userObj, ','));
        $arr = [];
        foreach ($objArr as $k => $v) {
            $arr[$v] = $userObjInfo[$v] ?? 0;
        }
        $str = implode('，', $arr);
        return $str;
    }

    /**
     * 编辑用户信息
     * @param $user_id 用户ID
     * @param array $saveData 保存的数据
     * @return array
     */
    public function editUser($user_id, $saveData = [], $addType) :array
    {
        $userModel = new Users();
        $userDetail = new UsersDetail();
        //创建时间
        $createtime = time();
        //用户主表字段
        $addUser['username'] = trim($saveData['username']);   //用户名
        $addUser['mobile'] = trim($saveData['mobile']);   //电话
        $addUser['email'] = trim($saveData['email']); //邮箱
        $addUser['org_id'] = trim($saveData['org_id']);   //部门 ID
        $addUser['job_type'] = trim($saveData['job_type']);   //角色ID
        $addUser['company_id'] = trim($saveData['company_id']);   //公司ID
        if ($addType == 'add') $addUser['createtime'] = $createtime;
        if ($addType == 'edit') $addUser['updatetime'] = $createtime;
        //用户详情表字段
        $addDetail['pact_type'] = trim($saveData['pact_type']);    //协议类型
        $addDetail['ready_computer'] = trim($saveData['ready_computer']);    //是否提前准备电脑
        $addDetail['room'] = trim($saveData['room']);    //住宿安排
        //预计入职时间

        if (!empty($saveData['preentrytime'])) {
            $addDetail['preentrytime'] = strtotime($saveData['preentrytime']);
        }
        //办理手续时间
        if (!empty($saveData['proceduretime'])) {
            $addDetail['proceduretime'] = strtotime($saveData['proceduretime']);
        }

        if ($addType == 'add') $addDetail['createtime'] = $createtime;
        if ($addType == 'edit') $addDetail['updatetime'] = $createtime;
        //如果是添加用户
        if ($addType == 'add') {
            //先判断用户名是否存在
            if (empty(trim($saveData['username']))) {
                $this->setErrors(0, '请填写用户!');
                return [];
            }
            //判断用户名是否被重复使用
            $userInfo = $userModel->where(['username' => trim($saveData['username'])])->field('id,username,org_id')->find();
            if (($userInfo['username'] == trim($saveData['username'])) && (trim($saveData['org_id']) == $userInfo['org_id'])) {
                $this->setErrors(0, sprintf('%s用户名已经重复!', $userInfo['username']));
                return [];
            }
            //开启事务
            $userModel->startTrans();
            $id = $userModel->insertGetId($addUser);
            //用户主表ID
            $addDetail['user_id'] = $id;
            if (!$id) {
                $userModel->rollback();
                $this->setErrors(0, Config::get('app_debug') ? $userDetail->getError() : '更新用户信息错误');
                return [];
            }
            $res = $userDetail->insert($addDetail);
            if (!$res) {
                $userModel->rollback();
                $this->setErrors(0, Config::get('app_debug') ? $userDetail->getError() : '更新用户信息错误');
                return [];
            }
            $userModel->commit();
            $this->setErrors(1, '添加用户信息成功!');
            return [];
        }

        //如果是编辑用户
        if (empty($user_id)) {
            $this->setErrors(0, '请填写用户!');
            return [];
        }
        //查询用户表
        $wh['a.id'] = $user_id;
        $info = $userModel
            ->alias('a')
            ->field($this->field)
            ->join('users_detail b', 'a.id = b.user_id', 'INNER')
            ->where($wh)->find();

        if (empty($info)) {
            $this->setErrors(0, '请填写用户!');
            return [];
        }


        $userModel->startTrans();
        $res = $userModel->where(['id' => $user_id])->update($addUser);
        if (!$res) {
            $userModel->rollback();
            $this->setErrors(0, Config::get('app_debug') ? $userModel->getError() : '更新用户信息错误');
            return [];
        }
        //更新时间
        $rest = $userDetail->where(['user_id' => $user_id])->update($addDetail);
        if (!$rest) {
            $userModel->rollback();
            $this->setErrors(0, Config::get('app_debug') ? $userDetail->getError() : '更新用户信息错误');
            return [];
        }

        $userModel->commit();
        $this->setErrors(1, '修改用户信息成功!');
        return [];
    }

    /**
     * @name    编辑用户权限 ，岗位，可刊登平台
     * @author  jason
     * @date  2019-04-05 01:15:20
     * @param $params
     * @return array|void
     * @throws \think\Exception
     */
    public function editrule($params)
    {
        $userModel = new Users();
        $userJobModel = new UsersJob();
        //用户ID
        $ids = explode(',', $params['ids']);
        if (empty($ids)) {
            $this->setErrors(0, '请选择用户!');
            return [];
        }
        switch ($params['saveType']) {
            case 'job_id':
                //岗位
                if ($params['job_id'][0] == '') {
                    $this->setErrors(0, '请选择岗位!');
                    return [];
                }
                $job_id = $params['job_id'];

                $job_str = implode(',', $job_id);
                //开启事务
                $userModel->startTrans();
                foreach ($ids as $user_id) {
                    $userInfo = $userModel->where(['a.id' => $user_id])->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->field('a.id,a.job_id')->find();
                    $userInfo = $userInfo->toArray();

                    if (empty($userInfo)) {
                        $userModel->rollback();
                        return;
                    }
                    //如果已经有分配过岗位的情况
                    if (!empty($userInfo['job_id'])) {
                        //将修改前的岗位ID跟数据库里面查询出来的岗位ID合并去重
                        $userJob = explode(',', trim($userInfo['job_id'], ','));
                        $mergeJob = array_merge($userJob, $job_id);
                        $mergeJob = array_unique($mergeJob);
                        //将users_job表中的under这个字段减一      这个减一是因为这个用户之前有，现在没有了
                        foreach ($userJob as $kk => $vv) {
                            $userJobInfo = $userJobModel->where(['id' => $vv])->field('under')->find();
                            if ($userJobInfo['under']) {
                                $res2 = $userJobModel->where(['id' => $vv])->setDec('under');
                                if (!$res2) {
                                    $userModel->rollback();
                                    return;
                                }
                            }
                        }
                        //将users_job表中的under这个字段加一      这个减一是因为这个用户之前没有有，现在有了
                        foreach ($job_id as $k2 => $v2) {
                            $res3 = $userJobModel->where(['id' => $v2])->setInc('under');
                            if (!$res3) {
                                $userModel->rollback();
                                return;
                            }
                        }
                    } else {
                        $mergeJob = $job_id;
                        foreach ($job_id as $k2 => $v2) {
                            $res3 = $userJobModel->where(['id' => $v2])->setInc('under');
                            if (!$res3) {
                                $userModel->rollback();
                                return;
                            }
                        }
                    }
                    //跟新用户表的岗位ID
                    $res4 = $userModel->where(['id' => $user_id])->update(['job_id' => $job_str]);
                    if (!$res4) {
                        $userModel->rollback();
                        return;
                    }
                }
                //提交事务
                $userModel->commit();
                $this->setErrors(1, '修改岗位成功!');
                break;
            case 'rules_id':
                //权限标签
                if (!isset($params['rules_id']) || empty($params['rules_id'])) {
                    $this->setErrors(0, '请选择权限标签!');
                    return [];
                }
                $rules_id = $params['rules_id'];
                foreach ($ids as $user_id) {
                    $userInfo = $userModel->where(['a.id' => $user_id])->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->field('a.id,a.rules_id')->find();
                    $userInfo = $userInfo->toArray();

                    if (empty($userInfo)) {
                        continue;
                    }
                    //如果已经有分配过权限标签的情况
                    if (!empty($userInfo['rules_id'])) {
                        $userRules = explode(',', trim($userInfo['rules_id'], ','));
                        $mergeRules = array_merge($userRules, $rules_id);
                        $mergeRules = array_unique($mergeRules);
                    } else {
                        $mergeRules = $rules_id;
                    }
                    $rule_str = implode(',', $mergeRules);
                    $res = $userModel->where(['id' => $user_id])->update(['rules_id' => $rule_str]);
                    if (!$res) {
                        continue;
                    }
                }
                $this->setErrors(1, '修改权限标签成功!');
                return [];
                break;
            case 'allow':
                //可刊登平台
                if (!isset($params['allow']) && empty($params['allow'])) {
                    $this->setErrors(0, '请选择可刊登平台!');
                    return [];
                }
                $allow = $params['allow'];
                foreach ($ids as $user_id) {
                    $userInfo = $userModel->where(['a.id' => $user_id])->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->field('a.id,a.allow')->find();
                    $userInfo = $userInfo->toArray();

                    if (empty($userInfo)) {
                        continue;
                    }
                    //如果已经有分配过可登录的系统的情况
                    if (!empty($userInfo['allow'])) {
                        $userAllow = explode(',', trim($userInfo['allow'], ','));
                        $userAllow = array_merge($userAllow, $allow);
                        $userAllow = array_unique($userAllow);
                    } else {
                        $userAllow = $allow;
                    }
                    $allow_str = implode(',', $userAllow);
                    $res = $userModel->where(['id' => $user_id])->update(['allow' => $allow_str]);
                    if (!$res) {
                        continue;
                    }
                }
                $this->setErrors(1, '修改可登录的系统成功!');
                return [];
                break;
            case 'all':
                //单个编辑
                if ($params['job_id'][0] == '') {
                    $this->setErrors(0, '请选择岗位!');
                    return [];
                }
                if (empty($params['rules_id'])) {
                    $this->setErrors(0, '请选择权限标签!');
                    return [];
                }
                if (empty($params['allow'])) {
                    $this->setErrors(0, '请选择可登录平台!');
                    return [];
                }
                //用户ID
                $user_id = $params['ids'];
                //岗位ID
                $job_id = $params['job_id'];
                $job_str = implode(',', $job_id);
                $allow = $params['allow'];
                //权限标签ID
                $rules_id = $params['rules_id'];
                $userInfo = $userModel->where(['a.id' => $user_id])->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->field('a.id,a.allow')->find();
                $userInfo = $userInfo->toArray();

                if (empty($userInfo)) {
                    $this->setErrors(0, '用户不存在!');
                    return [];
                }
                //如果已经有分配过岗位的情况
                if (!empty($userInfo['job_id'])) {
                    //将修改前的岗位ID跟数据库里面查询出来的岗位ID合并去重
                    $userJob = explode(',', trim($userInfo['job_id'], ','));
                    $mergeJob = array_merge($userJob, $job_id);
                    $mergeJob = array_unique($mergeJob);
                    //将users_job表中的under这个字段减一      这个减一是因为这个用户之前有，现在没有了
                    $userModel->startTrans();
                    foreach ($userJob as $kk => $vv) {
                        $userJobInfo = $userJobModel->where(['id' => $vv])->field('under')->find();
                        if ($userJobInfo['under']) {
                            $res2 = $userJobModel->where(['id' => $vv])->setDec('under');
                            if (!$res2) {
                                $userModel->rollback();
                                continue;
                            }
                        }
                    }
                    //将users_job表中的under这个字段加一      这个减一是因为这个用户之前没有，现在有了
                    foreach ($job_id as $k2 => $v2) {
                        $res3 = $userJobModel->where(['id' => $v2])->setInc('under');
                        if (!$res3) {
                            $userModel->rollback();
                            continue;
                        }
                    }
                    //跟新用户表的岗位ID
                    $res4 = $userModel->where(['id' => $user_id])->update(['job_id' => $job_str]);
                    if (!$res4) {
                        $userModel->rollback();
                    }
                    $userModel->commit();
                } else {
                    $userModel->startTrans();
                    $mergeJob = $job_id;
                    foreach ($job_id as $k2 => $v2) {
                        $res3 = $userJobModel->where(['id' => $v2])->setInc('under');
                        if (!$res3) {
                            $userModel->rollback();
                            continue;
                        }
                    }
                    //跟新用户表的岗位ID
                    $res4 = $userModel->where(['id' => $user_id])->update(['job_id' => $job_str]);
                    if (!$res4) {
                        $userModel->rollback();
                    }
                    $userModel->commit();
                }


                //跟新标签 如果已经有分配过权限标签的情况
                if (!empty($userInfo['rules_id'])) {
                    $userRules = explode(',', trim($userInfo['rules_id'], ','));
                    $mergeRules = array_merge($userRules, $rules_id);
                    $mergeRules = array_unique($mergeRules);
                } else {
                    $mergeRules = $rules_id;
                }
                $rule_str = implode(',', $mergeRules);

                //修改可刊登平台
                if (!empty($userInfo['allow'])) {
                    $userAllow = explode(',', trim($userInfo['allow'], ','));
                    $userAllow = array_merge($userAllow, $allow);
                    $userAllow = array_unique($userAllow);
                } else {
                    $userAllow = $allow;
                }
                $allow_str = implode(',', $userAllow);
                $re = $userModel->where(['id' => $user_id])->update(['allow' => $allow_str, 'rules_id' => $rule_str]);
                if (!$re) {
                    $this->setErrors(0, '操作失败!');
                    return [];
                }
                $this->setErrors(1, '操作成功!');
                return [];
                break;
        }
    }

    /**
     * @name    删除用户
     * @author  jason
     * @date  2019-04-02 11:00:01
     * @param $status
     * @param $params
     * @return array
     */
    public function del($status, $params)
    {
        $userModel = new Users();
        $userDetailModel = new UsersDetail();
        $userIdArr = array_filter($params, function ($par) {
            return !empty($par);
        });
        if (empty($userIdArr)) {
            $this->setErrors(0, '没有要删除的数据!');
        }
        $return_data = [];

        foreach ($userIdArr as $key => $user_id) {
            $userModel->startTrans();
            if ($status == 0 || $status == 2) {
                //已发OFFFER的是真删除
                $wh['a.id'] = $user_id;
                $info = $userModel->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->where($wh)->field('a.id,a.username')->find();

                if (empty($info)) {
                    $return_data[$user_id] = ['success' => false,
                                              'msg'     => sprintf('用户%s不存在', $info['username'])];
                    continue;
                }
                $re = $userModel->where(['id' => $user_id])->delete();
                if (!$re) {
                    $userModel->rollback();
                    $return_data[$user_id] = ['success' => false,
                                              'msg'     => Config::get('app_debug') ? $userModel->getError() : '删除用户信息错误'
                    ];
                    continue;
                }
                $re2 = $userDetailModel->where(['user_id' => $user_id])->delete();
                if (!$re2) {
                    $userModel->rollback();
                    $return_data[$user_id] = ['success' => false,
                                              'msg'     => Config::get('app_debug') ? $userDetailModel->getError() : '删除用户信息错误'
                    ];
                    continue;
                }
                $userModel->commit();
                $return_data[$user_id] = ['success' => true,
                                          'msg'     => sprintf('删除用户%s成功', $info['username'])];
            } else {
                //除了已发OFFER跟已入职的，其他的删除就是放入回收站
                $wh['a.id'] = $user_id;
                $info = $userModel->alias('a')->join('users_detail b', 'a.id=b.user_id', 'INNER')->where($wh)->field('a.id,a.username,a.status')->find();
                if (empty($info) || $info['status'] == 9) {
                    $userModel->rollback();
                    $return_data[$user_id] = ['success' => false,
                                              'msg'     => sprintf('用户%s不存在或者是已经在回收站', $info['username'])];
                    continue;
                }
                $result = $userModel->where(['id' => $user_id])->update(['status' => 9]);
                if (!$result) {
                    $userModel->rollback();
                    $return_data[$user_id] = ['success' => false,
                                              'msg'     => Config::get('app_debug') ? $userDetailModel->getError() : '删除用户信息错误'];
                    continue;
                }
                $userModel->commit();
                $return_data[$user_id] = ['success' => true,
                                          'msg'     => sprintf('%s已成功转入回收站', $info['username'])];
            }
        }

        $this->errors = 1;
        return $return_data;
    }

    /**
     * @name    获取用户信息
     * @author  jason
     * @date  2019-04-01 09:32:08
     * @param $user_id
     * @return array
     */
    public function getUser($user_id)
    {
        $userModel = new Users();
        $wh['a.id'] = $user_id;
        $info = $userModel
            ->alias('a')
            ->field($this->field)
            ->join('users_detail b', 'a.id = b.user_id', 'INNER')
            ->where($wh)->find();
        if (empty($info)) {
            $this->setErrors(0, '用户不存在!');
            return [];
        }
        $userInfo = $info->toArray();
        return $userInfo;
    }

    /**
     * @name    批量改状态
     * @author  jason
     * @date  2019-04-01 01:42:38
     * @param $params
     * @return array
     */
    public function pending($star, $params) :array
    {
        $userModel = new Users();
        $userStatus = Config::get('users.status');
        $statusNum = Config::get('users.statusNum');
        $return_data = [];
        //过滤掉为空的数据
        $data = array_filter($params['id'], function ($par) {
            return !empty($par);
        });
        if (!isset($star)) {
            return $return_data[100] = ['success' => false,
                                        'msg'     => '转入的状态有误'];
        }
        $status = trim($star);
        //对应的状态
        $statusMsg = $userStatus[$statusNum[$status]];

        foreach ($data as $k => $userId) {
            $where['a.id'] = $userId;
            $info = $userModel->where($where)->alias('a')->field($this->field)->join('users_detail b', 'a.id=b.user_id', 'INNER')->find();
            //如果是转离职或转回收站的时候就不要验证必填信息
            if ($status == 2) {
                if (empty($info['username']) || empty($info['email']) || empty($info['mobile']) || empty($info['org_id']) || empty($info['job_type']) || empty($info['preentrytime']) || empty($info['proceduretime'])) {
                    $return_data[$userId] = ['success' => false,
                                             'msg'     => sprintf('用户%s的信息填充完毕方可转入%s', $info['username'], $statusMsg)];
                    continue;
                }
            }

            $res = $userModel->where(['id' => $userId])->update(['status' => $status]);
            if ($res) {
                $return_data[$userId] = [
                    'success' => true,
                    'msg'     => sprintf('将用户%s成功转入%s', $info['username'], $statusMsg)];
            } else {
                $return_data[$userId] = ['success' => false,
                                         'msg'     => sprintf('将用户%s转入%s失败%s', $info['username'], $statusMsg)];
            }
        }
        $this->errors = 1;
        return $return_data;

    }

    /**
     * @name    获取所有的标签权限
     * @author  jason
     * @date  2019-04-04 09:40:53
     * @return array
     */
    public function getUsersLabel() :array
    {
        $userLabelModel = new UsersLabel();
        $userLabelInfo = $userLabelModel->where(['status' => 1])->cache('__USERLABEL__')->column('name', 'id');
        return $userLabelInfo;
    }

    /**
     * @name    获取部门的树结构
     * @author  jason
     * @date  2019-03-31 04:47:19
     * @return array
     */
    public function getOrg() :array
    {
        $departmentService = new \app\v1\service\Department();
        $orgInfo = $departmentService->organization(2);
        $orgInfo = array_column($orgInfo,'title','id');
        return $orgInfo;
    }

    /**
     * @name    所有的部门
     * @author  jason
     * @date  2019-04-08 09:45:40
     * @return array
     */
    public function getOrgAll() :array
    {
        $orgModel = new Organization();
        $orgInfo = $orgModel->where(['status'=>1])->column('title','id');
        return $orgInfo;
    }
    /**
     * @name    获得岗位信息
     * @author  jason
     * @date  2019-04-02 04:36:49
     * @return array
     */
    public function getUserObj()
    {
        $userObj = new UsersJob();
        $userInfo = $userObj->where(['status' => 1])->cache('__USERJOB__')->column('title', 'id');
        return $userInfo;
    }

    /**
     * 根据用户状态返回数量
     * @param array $statusNum
     * @return array
     */
    public function getStatusTotals($where = [])
    {
        if(isset($where['a.status']))unset($where['a.status']);
        $statusNum = Config::get('users.statusNum');
        $user = new Users();
        $info = $user->alias('a')
            ->join('users_detail b','a.id=b.user_id','INNER')
            ->group('a.status')->where($where)->column('count(a.id)', 'a.status');

        $count = array_sum($info);
        $statusArr = [];
        foreach ($info as $ke => $va) {
            $statusArr[$statusNum[$ke]] = $va;
        }

        $all_status['index'] = $count;
        $arr = array_merge($statusArr, $all_status);
        return $arr;
    }

    /**
     * @name    编辑备注
     * @author  jason
     * @date  2019-04-09 10:46:05
     * @param $params
     * @return array
     */
    public function saveNote($params)
    {
        $userModel = new Users();
        $note = trim($params['note']);
        $res = $userModel->where(['id'=>trim($params['id'])])->find();
        if(empty($res)){
            $this->setErrors(0, '用户不存在!');
            return [];
        }
        if(empty($note)){
            $this->setErrors(1, '修改备注成功!');
            return [];
        }
        $result = $userModel->where(['id'=>trim($params['id'])])->update(['remarks'=>$note]);
        if(!$result){
            $this->setErrors(0, '修改备注成功!');
            return [];
        }
        $this->setErrors(1, '修改备注成功!');
        return [];
    }

    /**
     * @name    日志
     * @author  jason
     * @date  2019-04-09 12:52:11
     * @param $params
     * @return array
     */
    public function showlog($params)
    {
        $userLogModel = new UsersLog();
        $id = $params['id'];
        $info['id'] = $id;
        $page_size = 100;
        $logInfo = $userLogModel->where(['user_id'=>$id])
            ->paginate($page_size, false);
        if (isset($params['debug']) && $params['debug'] == 'sql') {
            echo $userLogModel->getLastSql();
            die;
        }
        $page = $logInfo->render();
        $log = $logInfo->toArray()['data'];
        $return_data = [
            'info' => $log,
            'page' => $page
        ];
        return $return_data;
    }
}