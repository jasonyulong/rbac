<?php
/**
 * @Copyright (C), ZhuoShi.
 * @Author: 杨能文
 * @Name: Position.php
 * @Date: 2019/4/1
 * @Time: 14:55
 * @Description
 */

namespace app\v1\service;

use app\common\model\Users;
use app\common\model\UsersJob;
use plugin\Tree;
use think\Config;

class Position
{
    /**
     * @var UsersJob|null 岗位模型
     */
    private $userJob = null;
    /**
     * @var Users|null 用户模型
     */
    private $users = null;
    /**
     * @var int 错误状态
     */
    public $errors = 0;
    /**
     * @var string 错误提示
     */
    public $errorsMessages = "error";

    /**
     * Position constructor.
     */
    public function __construct()
    {
        $this->userJob = new UsersJob();
        $this->users = new Users();
    }

    /**
     * @desc 新增岗位
     * @author 杨能文
     * @param $request
     * @return bool
     */
    public function add($request):bool
    {
        $addData = [
            'pid' => (int)($request['pid'] ?? 0),
            'title' => trim($request['title']),
            'status' => 1, //0禁用，1启用
        ];

        $userJob = $this->userJob;
        $treeClass = \plugin\TreeClass::instance($userJob);

        $addData['rank'] = $this->rank($addData['pid']);
        if ($addData['pid'] > 0) {
            $parent = $userJob->where(['id' => $addData['pid']])->find();
            $addData['tid'] = $parent->tid;
        }

        // 启动事务
        $userJob->startTrans();
        try {
            // 开始更新左右值
            $return = $treeClass->add($addData['pid']);
            // 插入
            $id = $userJob->insert(array_merge($addData, $return), false, true);
            if ($addData['pid'] <= 0) {
                $userJob->where(['id' => $id])->update(['tid' => $id]);
            }
            // 提交事务
            $userJob->commit();
            return true;
        } catch (\Exception $e) {
            $this->setErrors(0, Config::get('app_debug') ? $e->getMessage() : __('添加岗位失败'));
            // 回滚事务
            $userJob->rollback();
            return false;
        }
    }

    /**
     * @desc 编辑岗位
     * @author 杨能文
     * @date 2019/4/1 14:57
     * @access public
     * @param $data
     * @return array
     */
    public function edit($data):array
    {
        $id = $data['id'];
        $save = [
            'pid' => (int)$data['pid'],
            'title' => trim($data['title']),
            'updatetime' => time(),
        ];
        $save['rank'] = $this->rank($save['pid']);

        //获取编辑前岗位信息
        $userJob = $this->userJob;
        $info = $userJob->where(['id' => $id])->find();
        $info = is_array($info) ? collection($info)->toArray() : $info->toArray();

        //如果父级岗位发生修改、检测是否存在子岗位、存在不允许修改(原因:扰乱层级关系)
        $sonTitle = $this->checkson($id);
        if ($save['pid'] != $info['pid'] && $sonTitle) return ['code' => 0, 'msg' => "存在子级岗位【{$sonTitle}】、不允许修改【父级名称】"];

        $userJob->startTrans();

        //如果父级发生修改、执行无限极分类添加
        if ($save['pid'] != $info['pid']) {
            $saveInfo = $this->addtree($save['pid'], $userJob);
            $this->updatetree($save['pid'], $userJob);
            $save = array_merge($save, $saveInfo);
        }

        $res = $userJob->update($save, ['id' => $id]);
        if ($res) {
            $this->tid($id);
            $userJob->commit();
            return ['code' => 1, 'msg' => '编辑岗位成功'];
        }
        $userJob->rollback();
        return ['code' => 0, 'msg' => '岗位信息未编辑'];
    }


    /**
     * @desc 检测子岗位
     * @author 杨能文
     * @date 2019/4/2 9:59
     * @access public
     * @param $id
     * @return string
     */
    public function checkson($id):string
    {
        if (empty($id)) return 0;
        $userJob = $this->userJob;
        $son = $userJob->where(['pid' => $id])->value('title');
        return $son ? $son : '';
    }

    /**
     * @desc 获取层级
     * @author 杨能文
     * @date 2019/4/2 9:20
     * @param $pid
     * @access public
     * @return string
     */
    public function rank($pid):string
    {
        if (empty($pid)) return 1;
        $userJob = $this->userJob;
        $rank = $userJob->where(['id' => $pid])->value('rank');
        $rank = $rank > 0 ? $rank + 1 : 1;
        return $rank;
    }

    /**
     * @desc 更新顶级类的tid
     * @author 杨能文
     * @date 2019/4/1 16:52
     * @access public
     * @param $id
     */
    public function tid($id)
    {
        $userJob = $this->userJob;
        $userJob->update(['tid' => $id], ['id' => $id, 'pid' => 0]);
    }

    /**
     * @desc 获取所有的岗位
     * @author 杨能文
     * @date 2019/4/1 15:54
     * @access public
     * @return array
     */
    public function position():array
    {
        $userJob = $this->userJob;
        // 必须将结果集转换为数组
        $ruleList = collection($userJob->where(['status' => 1])->order('weigh', 'desc')->select())->toArray();

        Tree::instance()->init($ruleList);
        $rulelist = Tree::instance()->getTreeList(Tree::instance()->getTreeArray(0), 'title');
        return $rulelist;
    }

    /**
     * @desc 获取统计后的岗位人员
     * @author 杨能文
     * @date 2019/4/1 18:15
     * @access public
     * @return array
     */
    public function userposition():array
    {
        $users = $this->users;
        $map = [
            'status' => ['in', '0,1,2'],
            'job_id' => ['gt', 0]
        ];
        $data = $users->field('job_id,count(id) as num')
            ->where($map)
            ->group('job_id')->select();
        if (is_array($data)) $data = collection($data)->toArray();
        $return = [];
        foreach ($data as &$val) {
            $return[$val['job_id']] = $val['num'];
        }
        return $return;
    }

    /**
     * @desc 根据id获取岗位信息
     * @author 杨能文
     * @date 2019/4/1 20:13
     * @access public
     * @param $id
     * @return array
     */
    public function positioninfo($id)
    {
        $userJob = $this->userJob;
        $data = $userJob->where(['id' => $id])->find();
        $data = is_array($data) ? collection($data)->toArray() : $data->toArray();
        return $data;
    }

    /**
     * 设置错误信息
     * @param $status
     * @param $messages
     * @return bool
     */
    private function setErrors($status, $messages)
    {
        $this->errors = $status;
        $this->errorsMessages = $messages;
        return true;
    }
}
