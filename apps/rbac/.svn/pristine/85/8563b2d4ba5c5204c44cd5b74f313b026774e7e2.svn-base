<?php
// +----------------------------------------------------------------------
// | Token授权中心
// +----------------------------------------------------------------------
// | Copyright (c) 2019 http://www.jeoshi.com All rights reserved.
// +----------------------------------------------------------------------
// | Author: kevin
// +----------------------------------------------------------------------

namespace app\common\library\auth;


use app\common\model\Menus;
use plugin\Tree;

class Access extends Drive
{
    protected $breadcrumb = [];
    protected $menus = [];

    /**
     * 获取所有菜单
     * @param $module_id
     * @return array
     */
    public function getMenus($module_id)
    {
        if (!empty($this->menus)) {
            return $this->menus;
        }

        $this->menus = collection(Menus::where(['status' => 1, 'module_id' => $module_id])->order('weigh', 'desc')->select())->toArray();
        return $this->menus;
    }

    /**
     * 获得面包屑导航
     * @param string $path
     * @return array
     */
    public function getBreadCrumb($module_id, $path = '')
    {
        if ($this->breadcrumb || !$path)
            return $this->breadcrumb;
        $path_rule_id = 0;

        // 必须将结果集转换为数组
        $menuLists = $this->getMenus($module_id);

        foreach ($menuLists as $rule) {
            $path_rule_id = $rule['url'] == $path ? $rule['id'] : $path_rule_id;
        }
        if ($path_rule_id) {
            $this->breadcrumb = Tree::instance()->init($menuLists)->getParents($path_rule_id, true);
            foreach ($this->breadcrumb as $k => &$v) {
                $v['url'] = url($v['url']);
                $v['title'] = __($v['title']);
            }
        }
        return $this->breadcrumb;
    }

    /**
     * 获取菜单列表
     * @param $module_id 系统ID
     * @param array $params 参数
     * @param string $fixedPage
     * @return array
     */
    public function getSidebar($module_id, $params = [], $fixedPage = '/index/index/index')
    {
        $colorArr = ['red', 'green', 'yellow', 'blue', 'teal', 'orange', 'purple'];
        $colorNums = count($colorArr);
        $badgeList = [];

        if (!empty($params)) {
            // 生成菜单的badge
            foreach ($params as $k => $v) {
                $url = $k;
                if (is_array($v)) {
                    $nums = isset($v[0]) ? $v[0] : 0;
                    $color = isset($v[1]) ? $v[1] : $colorArr[(is_numeric($nums) ? $nums : strlen($nums)) % $colorNums];
                    $class = isset($v[2]) ? $v[2] : 'label';
                } else {
                    $nums = $v;
                    $color = $colorArr[(is_numeric($nums) ? $nums : strlen($nums)) % $colorNums];
                    $class = 'label';
                }
                //必须nums大于0才显示
                if ($nums) {
                    $badgeList[$url] = '<small class="' . $class . ' pull-right bg-' . $color . '">' . $nums . '</small>';
                }
            }
        }

        // 读取用户当前拥有的菜单节点
        $userMenuIds = $this->getMenusList();
        $select_id = 0;

        // 必须将结果集转换为数组
        $menuLists = $this->getMenus($module_id);

        foreach ($menuLists as $k => &$v) {
            if (!in_array($v['id'], $userMenuIds)) {
                //unset($menuLists[$k]);
                //continue;
            }
            $select_id = (trim($v['url'], '/') == $fixedPage || trim($v['url'], '/') . '/index' == $fixedPage) ? ($v['pid'] > 0 ? $v['pid'] : $v['id']) : $select_id;
            $v['url'] = $v['url'];
            $v['badge'] = isset($badgeList[$v['url']]) ? $badgeList[$v['url']] : '';
            $v['title'] = __($v['title']);
        }

        $menu = $nav = '';

        // 获取顶级菜单
        $topList = [];
        foreach ($menuLists as $index => $item) {
            if (!$item['pid']) {
                $topList[] = $item;
            }
        }
        if ($select_id == 0 && !empty($topList)) {
            $select_id = $topList[0]['id'] ?? 0;
        }

        $selectParentIds = [];
        $tree = Tree::instance();
        $tree->init($menuLists);
        if ($select_id) {
            $selectParentIds = $tree->getParentsIds($select_id, true);
        }

        // 顶部菜单
        foreach ($topList as $index => $item) {
            $childList = Tree::instance()->getTreeMenu($item['id'], '<li class="@class" pid="@pid"><a href="@url" addtabs="@id" url="@url"><i class="@icon"></i> <span>@title</span> <span class="fa arrow"></span></a> @childlist</li>', $select_id, '', 'ul', 'class="nav nav-second-level"');
            // 生成顶部导航
            $navchildlist = Tree::instance()->getTreeMenu($item['id'], '<div class="title">@title</div>@childlist', $select_id, '', 'div', 'class="mini clearfix"');
            // 生成下拉
            $navchildlistul = !empty($navchildlist) ? '<ul class="dropdown-menu dropdown-tasks">' . $navchildlist . '</ul>' : '';

            $current = in_array($item['id'], $selectParentIds);
            $url = url('/' . trim($item['url'], '/'));

            $childList = str_replace('" pid="' . $item['id'] . '"', ' treeview ' . ($current ? '' : '') . '" pid="' . $item['id'] . '"', $childList);
            $ico = (!empty($item['icon']) && trim($item['icon']) != 'fa') ? $item['icon'] : 'fa fa-chevron-right';
            $nav .= '<li class="dropdown ' . ($current ? 'active' : '') . '">
            <a href="' . $url . '" class="dropdown-toggle" data-hover="dropdown" addtabs="' . $item['id'] . '" url="' . $url . '"><i class="' . $ico . '"></i> <span>' . $item['title'] . '</span> <span class="pull-right-container"> </span></a>
            ' . $navchildlistul . '</li>';

            $menu .= $childList;
        }

        return [$menu, $nav];
    }


    /**
     * 获取菜单权限
     * @param null $uid
     * @return array
     */
    public function getMenusList($uid = null)
    {
        $uid = is_null($uid) ? $this->id : $uid;

        static $_rulelist = []; //保存用户验证通过的权限列表
        if (isset($_rulelist[$uid])) {
            return $_rulelist[$uid];
        }

        // 读取用户规则节点
        list($menuId, $ruleId) = $this->getRuleIds($uid);
        if (empty($menuId)) {
            $_rulelist[$uid] = [];
            return [];
        }
        return $menuId;
    }

    /**
     * 获取节点权限
     * @param null $uid
     * @return array
     */
    public function getRuleList($uid = null)
    {
        $uid = is_null($uid) ? $this->id : $uid;

        static $_rulelist = []; //保存用户验证通过的权限列表
        if (isset($_rulelist[$uid])) {
            return $_rulelist[$uid];
        }

        // 读取用户规则节点
        list($menuId, $ruleId) = $this->getRuleIds($uid);
        if (empty($ruleId)) {
            $_rulelist[$uid] = [];
            return [];
        }
        return $ruleId;
    }

    /**
     * 获取用户岗位ID
     * @param $uid 用户ID
     * @return mixed
     */
    public function getRuleIds($uid)
    {
        static $groups = [];
        if (isset($groups[$uid])) {
            return $groups[$uid];
        }
        $labelModel = new \app\common\model\UsersLabelAccess();
        $jobModel = new \app\common\model\UsersJobAccess();
        // 标签权限
        $menu_id = $menu_detail_id = [];
        $labelAccess = !empty($this->rulesId) ? $labelModel->where(['label_id' => ['IN', $this->rulesId]])->column(['id', 'type', 'menu_id', 'menu_detail_id']) : [];
        if (!empty($labelAccess)) {
            foreach ($labelAccess as $val) {
                $menu_id[] = $val->menu_id;
                $menu_detail_id[] = $val->menu_detail_id;
            }
        }
        // 岗位权限
        $jobAccess = !empty($this->jobId) ? $jobModel->where(['job_id' => $this->jobId])->column(['id', 'type', 'menu_id', 'menu_detail_id']) : [];
        if (!empty($jobAccess)) {
            foreach ($jobAccess as $val) {
                $menu_id[] = $val->menu_id;
                $menu_detail_id[] = $val->menu_detail_id;
            }
        }

        $groups[$uid] = [$menu_id, $menu_detail_id];
        return $groups[$uid];
    }
}